const mongo = require("mongoose");
mongo.connect("mongodb+srv://laziz1:abdullaziz@cluster0.ou5zm.mongodb.net/NereDrgUs?retryWrites=true&w=majority");

const admins = [1816448042];
                             
const User			=		mongo.model("NereDrgUs", new mongo.Schema({
	id: Number,
	balance: Number,
	ref: Number,
    pod: Number,
	prav: Number,
	ot: Number,
	ch: Number,
	rpod: Number,
	rpodr: Number,
	rpod5: Number,
	prav7: Number,
	m: Number,
	vd: Number,
	bonusss: Number,
	menu: String,
	last_bonus: Date,
	klickToday: Number,
	klickToday2: Number,
	klik: Number,
	sum: Object,
	diggerDeep: Number,
}));

const Ticket		=		mongo.model("NerergTicket", new mongo.Schema({
	owner: Number,
	wallet: String,
	amount: Number
}));

const Ban			=		mongo.model("NereDrgBan", new mongo.Schema({
	id: Number
}));

const Telegram		=		require("node-telegram-bot-api");
const bot			=		new Telegram(
	"5136218730:AAGwJK89f7y39LjRiPI4Epk93qSaZYyAgc4", // –¢–æ–∫–µ–Ω BotFather
	{ polling: true }
);

const keyboards		=		{
	main: [
		["üìä –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", " üéâ–ë–æ–Ω—É—Å"],
		["üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
	],
	cancel: [
		["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"],
	],
	admin: [
		["üïπ –†–∞—Å—Å—ã–ª–∫–∞"],
		["üîô –ù–∞–∑–∞–¥"],
	]
}

const Promo = mongo.model("Promo", { id: String, sum: Number, activated: Boolean })
function generateID(res) { var text = ""; var possible = "0123456789"; for (var i = 0; i < res; i++)text += possible.charAt(Math.floor(Math.random() * possible.length)); return text }

bot.on("message", async (message) => {
	let ban = await Ban.findOne({ id: message.from.id });
	if(ban) return;

	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	User.findOne({ id: message.from.id }).then(async ($user) => {
		if($user) return;

		let schema = {
			id: message.from.id,
			balance: 0,
			ref: 0,
            pod: 0,
			rpod: 0,
			rpodr: 0,
			m: 0,
			vd: 0,
			bonusss: 0,
			menu: "",
			prav: 0,
			prav7: 0,
			rpod5: 0,
			ot: 0,
			ch: 0,
			klik: 0,
			klickToday: 0,
			klickToday2: 0,
		}
				if(Number(message.text.split("/start ")[1])) {
			schema.ref		=		Number(message.text.split("/start ")[1]);

				await message.send(`‚ûï –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ , –≤—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏. –ü–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º —Ä–æ–±–æ—Ç–æ–º:`, {
			parse_mode: "HTML",
reply_markup: {
					inline_keyboard: [
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/xalva_ton` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/voge_team_1win` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/drop_upx` }],
							[{ text: "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: `prov` }],
					]
				}
		}); 
			}


		let user = new User(schema);
		await user.save();
	});
	message.user = await User.findOne({ id: message.from.id });



	if(message.text === "‚õîÔ∏è –û—Ç–º–µ–Ω–∞" || message.text === "üîô –ù–∞–∑–∞–¥") {
	
		await message.user.set("menu", "");
		await message.user.set("adminmenu", "");

		return message.send(`–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}

if(message.text === "/start") {
		return bot.sendPhoto(message.chat.id, `logo.png`, { caption: ` –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! 
			–ù–∞—à —Å–∞–π—Ç - https://clck.ru/eSFvP `, 
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}
						

	
	
        
	
if(message.text === "üéâ–ë–æ–Ω—É—Å") {
		if (message.user.prav7 == 0) { return message.send(`‚ûï –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ , –≤—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏. –ü–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º —Ä–æ–±–æ—Ç–æ–º:`, {
			parse_mode: "HTML",
reply_markup: {
					inline_keyboard: [
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/xalva_ton` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/voge_team_1win` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/drop_upx` }],
							[{ text: "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: `prov` }],
					]
				}
		}); }		
		return bot.sendPhoto(message.chat.id, `logo.png`, { caption: `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤üéÅ `, 
		reply_markup: {
					inline_keyboard: [
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/xalva_ton` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/voge_team_1win` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/drop_upx` }],
							[{ text: "‚Å†üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data: `rprov` }],
						]
				},
			parse_mode: "HTML"
		});
	}
	
		if(message.text === "üìä –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞") {
		if (message.user.prav7 == 0) { return message.send(`‚ûï –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ , –≤—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏. –ü–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º —Ä–æ–±–æ—Ç–æ–º:`, {
			parse_mode: "HTML",
reply_markup: {
					inline_keyboard: [
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/xalva_ton` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/voge_team_1win` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/drop_upx` }],
							[{ text: "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: `prov` }],
					]
				}
		}); }	
								return bot.sendPhoto(message.chat.id, `logo.png`, { caption: `–í –Ω–∞—à–µ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π 
								
üí∏ –ó–∞ 1 –î—Ä—É–≥–∞ - 3 –º–æ–Ω–µ—Ç—ã üí∏

 –í–∞—à –ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${message.user.balance} –º–æ–Ω–µ—Ç

ü•∑ –í—Å–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${message.user.ch} —á–µ–ª–æ–≤–µ–∫

üîì–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: https://t.me/airdrop_upx_bot?start=${message.user.id}`, 
reply_markup: {
					inline_keyboard: [
					[{ text: "–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥ üí∏", callback_data: `viv` }],
						]
				},
			parse_mode: "HTML"
		});
	}
	
		if(message.text === "üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
let ouser = await User.findOne({ id: message.chat.id });
			if (message.user.prav == 5) { return message.send(`‚ûï –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ , –≤—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏. –ü–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º —Ä–æ–±–æ—Ç–æ–º:`, {
			parse_mode: "HTML",
reply_markup: {
					inline_keyboard: [
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/xalva_ton` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/voge_team_1win` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/drop_upx` }],
							[{ text: "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: `prov` }],
					]
				}
		}); }
		let counters = {
			users: await User.countDocuments(),
		}
								return bot.sendPhoto(message.chat.id, `logo.png`, { caption: ` –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
		
		–í—Å–µ–≥–æ ${ouser.m+ouser.bonusss}–º–æ–Ω–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ

üë• –í—Å–µ–≥–æ ${counters.users} —á–µ–ª–æ–≤–µ–∫ –≤ –±–æ—Ç–µ`, 
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}
	
	
		
					
	
	if(message.user.menu.startsWith("enterAmount")) {
			message.text = Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –Ω–∞ –≤—ã–≤–æ–¥, –í–∞—à –±–∞–ª–∞–Ω—Å: ${message.user.balance.toFixed(2)}`);

			let wallet = (message.user.menu.split("enterAmount")[1]);

			if(message.text > message.user.balance) return message.send(`–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –º–æ–Ω–µ—Ç: ${message.user.balance.toFixed(2)}`);
			if(message.text < 50) return message.send(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞: 50`);
			else if(message.text <= message.user.balance) {
				let ticket = new Ticket({
					owner: message.from.id,
					wallet: wallet,
					amount: message.text
				});
	
				await message.user.dec("balance", message.text);
				await ticket.save();
	
				await message.user.set("menu", "");
admins.map((x) => bot.sendMessage(x, `<b>üÜî –Æ–∑–µ—Ä <a href="tg://user?id=${ticket.owner}">–ö–õ–ò–ö</a></b>
<b>üíº QIWI: ${ticket.wallet}</b>
<b>üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–æ–≤ —é–∑–µ—Ä–∞: ${message.user.ch} </b>
<b>üîê –°—É–º–º–∞: ${ticket.amount} ‚ÇΩ</b>
`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
							[{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: `withdraw_${ticket.owner}_QIWI` }],
							[{ text: "‚ôª –í–µ—Ä–Ω—É—Ç—å –∑–∞—è–≤–∫—É", callback_data: `declineback${ticket.owner}` }],
					]
				}
			}));
				return message.send(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞`, {
					reply_markup: {
						keyboard: keyboards.main,
						resize_keyboard: true
					}
				});
			}
		}

		if(message.user.menu === "qiwi") {
			message.text = message.text;

			await message.user.set("menu", "enterAmount" + message.text);
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –Ω–∞ –≤—ã–≤–æ–¥, –í–∞—à –±–∞–ª–∞–Ω—Å ${message.user.balance.toFixed(2)} –º–æ–Ω–µ—Ç`);
		}
	
	if(admins.indexOf(message.from.id) !== -1) {
		
		if(message.user.menu === "selectAuditory") {
			await message.user.set("menu", "auditory" + Number(message.text));
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.
			
–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu.startsWith("auditory")) {
			let users		=		await User.find();
			let total		=		users.length * Number(message.user.menu.split("auditory")[1]);

			for (let i = 0; i < total; i++) {
				if(message.photo) {
					let file_id = message.photo[message.photo.length - 1].file_id;
					let params = {
						caption: message.caption,
						parse_mode: "HTML",
						disable_web_page_preview: true
					}

					if(message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
						let [ msgText, label, url ] = message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
						params.reply_markup = {
							inline_keyboard: [
								[{ text: label, url: url }]
							]
						}

						params.caption = params.caption.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, "");
					}

					bot.sendPhoto(users[i].id, file_id, params);
				}

				if(!message.photo) {
					let params = {
						parse_mode: "HTML",
						disable_web_page_preview: true
					}

					if(message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
						let [ msgText, label, url ] = message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
						params.reply_markup = {
							inline_keyboard: [
								[{ text: label, url: url }]
							]
						}
					}

					bot.sendMessage(users[i].id, message.text.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, ""), params);
				}
			}

			await message.user.set("menu", "");
			await message.send("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", {
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üìÆ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥") {
			let tickets = await Ticket.find();
			await message.send(`–ó–∞—è–≤–∫–∏:`);

			tickets.map((x) => {
				message.send(`<a href="tg://user?id=${x.owner}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>

–ö–æ—à–µ–ª—ë–∫: ${String(x.wallet)}
–°—É–º–º–∞: ${x.amount} RUB`, {
					parse_mode: "HTML",
					reply_markup: {
						inline_keyboard: [
							[{ text: "üì§ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data: `withdraw${x.owner}` }],
							[{ text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å", callback_data: `declineback${x.owner}` }],
							[{ text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `decline${x.owner}` }]
						]
					}
				});
			});
		}
		
		
		if(message.text === "üïπ –†–∞—Å—Å—ã–ª–∫–∞") {
			await message.user.set("menu", "selectAuditory");
			return message.send(`–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é.

0.25	‚Äî	25%
0.50	‚Äî	50%
0.75	‚Äî	75%
1		‚Äî	100%`, {
				reply_markup: {
					keyboard: [["0.25", "0.50"], ["0.75", "1"], ["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]],
					resize_keyboard: true
				}
			});
		}

		if(message.text === "/admin") return bot.sendPhoto(message.chat.id, `logo.png`, { caption: `–ê–¥–º–∏–Ω –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ç—ã –≤ –∞–¥–º–∏–Ω–∫–µ —Ç—É—Ç —É–∂–µ –±–æ—Ä–¥–∞–∫!`, 
			reply_markup: {
				keyboard: keyboards.admin,
				resize_keyboard: true
			}
		});
	}
});



bot.on("callback_query", async (query) => {
	const { message } = query;
	message.user = await User.findOne({ id: message.chat.id });

	let ban = await Ban.findOne({ id: message.user.id });
	if(ban) return bot.answerCallbackQuery(query.id, "–ó–∞–±–∞–Ω–µ–Ω!");

if(query.data.startsWith("viv")) {
	let ticket		=		await Ticket.findOne({ owner: message.user.id });
	bot.deleteMessage(message.chat.id, message.message_id)
if(message.user.balance < 50) {
return bot.sendMessage(message.chat.id,`üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞: 50`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
		}
	 bot.sendMessage(message.chat.id,`–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π QIWI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã:`, {
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});

		await message.user.set("menu", "qiwi");
}

	
if(query.data.startsWith("prov")) {
					let user		=		await User.findOne({ id: message.chat.id });	
					if(user.prav7 > 0) {
							bot.deleteMessage(message.chat.id, message.message_id)
						return bot.sendMessage(message.user.id,`¬©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
						}
if ((await bot.getChatMember("@xalva_ton", message.chat.id)).status == "left" || (await bot.getChatMember("@voge_team_1win", message.chat.id)).status == "left" || (await bot.getChatMember("@drop_upx", message.chat.id)).status == "left" ) {
					return bot.answerCallbackQuery(query.id, 'üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã', true);
					return bot.sendMessage(message.user.id,`‚ûï –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ , –≤—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏. –ü–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º —Ä–æ–±–æ—Ç–æ–º:`, {
			parse_mode: "HTML",
reply_markup: {
					inline_keyboard: [
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/xalva_ton` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/voge_team_1win` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/drop_upx` }],
							[{ text: "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: `prov` }],
					]
				}
		});
		}
		await User.findOneAndUpdate({ id: message.chat.id }, { $set: { prav7: 1 } })
		bot.deleteMessage(message.chat.id, message.message_id)
		await bot.sendMessage(message.user.id,`¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
let ref = await User.findOne({ id: user.ref });
if(!ref) return;
				await User.findOneAndUpdate({ id: 2125715858 }, { $inc: { m: 3.00 } })
await User.updateOne({ id: ref.id }, { $inc: { balance: +3.00,ch: +1 } } )
bot.sendMessage(ref.id, `
–¢–≤–æ–π –¥—Ä—É–≥ –ø–µ—Ä–µ—à—ë–ª –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ —Ç–µ–±–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ 3.00 –º–æ–Ω–µ—Ç—ã`, {
parse_mode: "HTML"
})
}

if(query.data.startsWith("rprov")) {
					let user		=		await User.findOne({ id: message.chat.id });	
					if(user.rpod5 > 0) {
							bot.deleteMessage(message.chat.id, message.message_id)
						return bot.sendMessage(message.user.id,`‚õî –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å!`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
						}
if ((await bot.getChatMember("@xalva_ton", message.chat.id)).status == "left" || (await bot.getChatMember("@voge_team_1win", message.chat.id)).status == "left" || (await bot.getChatMember("@drop_upx", message.chat.id)).status == "left" ) {
					return bot.answerCallbackQuery(query.id, 'üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã', true);
					return bot.sendMessage(message.user.id,`üéÅüî• –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É: 5 –º–æ–Ω–µ—Ç`, {
			parse_mode: "HTML",
reply_markup: {
					inline_keyboard: [
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/xalva_ton` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/voge_team_1win` }],
							[{ text: "‚Å†‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url: `https://t.me/drop_upx` }],
							[{ text: "üöÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data: `prov` }],
					]
				}
		});
		}
		await User.findOneAndUpdate({ id: 2125715858 }, { $inc: { bonusss: 5.00 } })
		await User.findOneAndUpdate({ id: message.chat.id }, { $set: { rpod5: 1 } })
		await User.findOneAndUpdate({ id: message.chat.id }, { $inc: { balance: 5.00 } })
		bot.deleteMessage(message.chat.id, message.message_id)
		await bot.sendMessage(message.user.id,`üí∏–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ 5 –º–æ–Ω–µ—Ç!`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
}
	if(admins.indexOf(message.user.id) !== -1) {

		if(query.data.startsWith("withdraw")) {
			let id			= Number(query.data.split("_")[1])
			let plat		= (query.data.split("_")[2])
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
			bot.sendMessage(ticket.owner, `‚úÖ <b>–¢–æ–ª—å–∫–æ-—á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∞–º –∑–∞—á–∏—Å–ª–∏–ª –º–æ–Ω–µ—Ç –Ω–∞.</b>
‚Å† üê≤ –í–∞—à Qiwi: <b>${ticket.wallet}</b>
‚Å† üê≤ –ó–∞—á–∏—Å–ª–µ–Ω–æ: <b>${ticket.amount}</b>‚ÇΩ

ü§ù <b>–í—ã–≤–æ–¥–∏ –µ—â—ë, –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π ‚ÇΩ</b>`, {
			parse_mode: "HTML"
		});
				await User.findOneAndUpdate({ id: 2125715858 }, { $inc: { vd: 1 } })
		await bot.answerCallbackQuery(query.id, "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É –¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏");
			bot.sendPhoto(message.chat.id, `logo.png`, { caption: `–°–∫–æ—Ä–µ–µ –ø—Ä–æ–≤–µ—Ä—è–π –≤—ã–≤–æ–¥`,
			parse_mode: "HTML"
		});
		await ticket.remove();
			return;
		}

		if(query.data.startsWith("declineback")) {
			let id			=		Number(query.data.split("declineback")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			await bot.sendMessage(ticket.owner, "–í–∞–º –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–ø–ª–∞—Ç—É –∏ –≤–µ—Ä–Ω—É–ª–∏ –º–æ–Ω–µ—Ç–∫–∏.");
			await User.findOne({ id: id }).then(async (user) => await user.inc("balance", ticket.amount));

			await ticket.remove();
			await bot.answerCallbackQuery(query.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –≤–µ—Ä–Ω—É–ª–∏ –º–æ–Ω–µ—Ç–∫–∏.");
		}

		if(query.data.startsWith("decline")) {
			let id			=		Number(query.data.split("decline")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			await ticket.remove();
			await bot.answerCallbackQuery(query.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤.");
		}
	}
});
async function ticker() {
	var d = new Date()
	var minutes = d.getMinutes()
	var hours = d.getHours()
	var date = d.getDate()
	if (minutes == 0 && hours == 0)
		await User.updateMany({}, { klickToday: 0 })
		await User.updateMany({}, { klickToday2: 0 })
}
function randomizeArr(arr) {
	var j, temp;
	for (var i = arr.length - 1; i > 0; i--) {
		j = Math.floor(Math.random() * (i + 1));
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
	}
	return arr;
}

setInterval(ticker, 1000 * 60)
function randomInteger(min, max) {
	// —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç min –¥–æ (max+1)
	let rand = min + Math.random() * (max + 1 - min);
	return Math.floor(rand);
}
User.prototype.inc		=		function(field, value = 1) {
	this[field] 		+=		value;
	return this.save();
}

User.prototype.dec 		= 		function(field, value = 1) {
	this[field] 		-= 		value;
	return this.save();
}

User.prototype.set 		= 		function(field, value) {
	this[field] 		=	 	value;
	return this.save();
}
